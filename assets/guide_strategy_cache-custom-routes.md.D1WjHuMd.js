import{_ as i,c as t,o as n,j as e,af as l,a as h,t as o}from"./chunks/framework.CBsWK142.js";const y=JSON.parse('{"title":"Cache custom routes","description":"","frontmatter":{"title":"Cache custom routes"},"headers":[],"relativePath":"guide/strategy/cache-custom-routes.md","filePath":"guide/strategy/cache-custom-routes.md","lastUpdated":1690362947000}'),r={name:"guide/strategy/cache-custom-routes.md"},p={id:"frontmatter-title",tabindex:"-1"};function d(a,s,c,k,g,E){return n(),t("div",null,[e("h1",p,[h(o(a.$frontmatter.title)+" ",1),s[0]||(s[0]=e("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"​",-1))]),s[1]||(s[1]=l(`<p>By default the plugin registers a middleware to intercept all <a href="https://docs.strapi.io/developer-docs/latest/developer-resources/database-apis-reference/rest-api.html#api-endpoints" target="_blank" rel="noreferrer">predefined routes</a>, but you can also enable it on custom routes.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// file: /config/plugins.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ({</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;rest-cache&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    config: {,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      provider: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      strategy: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        contentTypes: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            contentType: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;api::pages.pages&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            routes: </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* @type {CacheRouteConfig[]} */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              {</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                path: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/api/pages/slug/:slug+&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// note that we set the /api prefix here</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                method: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;GET&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// can be omitted, defaults to GET</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              },</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>At this time a custom route can only be registered within a single Content-Type.</p></div><h2 id="cacherouteconfig-reference" tabindex="-1"><code>CacheRouteConfig</code> reference <a class="header-anchor" href="#cacherouteconfig-reference" aria-label="Permalink to &quot;\`CacheRouteConfig\` reference&quot;">​</a></h2><h3 id="path" tabindex="-1"><code>path</code> <a class="header-anchor" href="#path" aria-label="Permalink to &quot;\`path\`&quot;">​</a></h3><p>Refer to an <a href="https://docs.strapi.io/developer-docs/latest/development/backend-customization/routes.html" target="_blank" rel="noreferrer">existing route path in strapi</a> on which the cache middleware will be registered.<br> A warning will be displayed if the path does not exist.</p><ul><li><strong>Type:</strong> <code>string</code></li><li><strong>Default:</strong> <code>GET</code></li></ul><h3 id="method" tabindex="-1"><code>method</code> <a class="header-anchor" href="#method" aria-label="Permalink to &quot;\`method\`&quot;">​</a></h3><p>Refer to an <a href="https://docs.strapi.io/developer-docs/latest/development/backend-customization/routes.html" target="_blank" rel="noreferrer">existing route method in strapi</a> on which the cache middleware will be registered.<br> A warning will be displayed if the path does not exist.</p><ul><li><strong>Type:</strong> <code>&#39;GET&#39; | &#39;POST&#39; | &#39;PUT&#39; | &#39;PATCH&#39; | &#39;DELETE&#39;</code></li><li><strong>Default:</strong> <code>GET</code></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Cache lookup is performed only on <code>GET</code> requests, and cache invalidation is performed on all other requests.</p></div><h3 id="hitpass" tabindex="-1"><code>hitpass</code> <a class="header-anchor" href="#hitpass" aria-label="Permalink to &quot;\`hitpass\`&quot;">​</a></h3><p>When true, the cache plugin will not lookup for cache and serve fresh response from backend instead. Also, the response is not stored in the cache.</p><ul><li><strong>Type:</strong> <code>(ctx: Context) =&gt; boolean | boolean</code></li><li><strong>Default:</strong> <em>(inherit from <code>CacheContentTypeConfig</code> if set)</em></li></ul><h3 id="keys" tabindex="-1"><code>keys</code> <a class="header-anchor" href="#keys" aria-label="Permalink to &quot;\`keys\`&quot;">​</a></h3><p>Options used to generate the cache keys.</p><ul><li><strong>Type:</strong> <a href="./cache-keys.html#cachekeysconfig-reference"><code>CacheKeysConfig</code></a></li><li><strong>Default:</strong> <em>(inherit from <code>CacheContentTypeConfig</code> if set)</em></li></ul><h3 id="maxage" tabindex="-1"><code>maxAge</code> <a class="header-anchor" href="#maxage" aria-label="Permalink to &quot;\`maxAge\`&quot;">​</a></h3><p>Default max age for cached entries.</p><ul><li><strong>Type:</strong> <code>number</code></li><li><strong>Default:</strong> <em>(inherit from <code>CacheContentTypeConfig</code> if set)</em></li></ul>`,20))])}const f=i(r,[["render",d]]);export{y as __pageData,f as default};
