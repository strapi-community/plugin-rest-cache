import{_ as a,c as s,o as i,af as n}from"./chunks/framework.CBsWK142.js";const g=JSON.parse('{"title":"Cache strategy configuration","description":"","frontmatter":{"title":"Cache strategy configuration"},"headers":[],"relativePath":"4.x.x/strategy/index.md","filePath":"versions/4.x.x/strategy/index.md","lastUpdated":1758132556000}'),t={name:"4.x.x/strategy/index.md"};function l(o,e,r,h,c,d){return i(),s("div",null,e[0]||(e[0]=[n('<h1 id="cache-strategy-configuration" tabindex="-1">Cache strategy configuration <a class="header-anchor" href="#cache-strategy-configuration" aria-label="Permalink to &quot;Cache strategy configuration&quot;">​</a></h1><p>The plugin will <strong>only inject cache middleware to Content-Types which have been explicitely enabled</strong>. This can be done by setting the <code>config.strategy.contentTypes</code> configuration.</p><p>It accept either a string or an object, so we can configure differently each Content-Type.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// file: /config/plugins.js</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ({</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;rest-cache&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    config: {,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      provider: {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>\n<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      strategy: </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* @type {CachePluginStrategy} */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        keysPrefix: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;project-name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        maxAge: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3600000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        debug: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        contentTypes: [ </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/** ... */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ],</span></span>\n<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>In addition to the <strong>contentType</strong> configuration, you can also set the default <strong>maxAge</strong>, <strong>hitpass</strong> and <strong>keys</strong> configuration, enables <strong>ETag</strong> and <strong>X-Cache</strong> headers or tune how the plugin will work for each route.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>The plugin will not cache any request if the <code>Authorization</code> header is present on the request or if the <code>Cookie</code> header is present on the request. This is to prevent caching of private data.</p><p>You can change this behavior by setting the <code>config.strategy.hitpass</code> configuration.</p></div><h2 id="cachepluginstrategy-reference" tabindex="-1"><code>CachePluginStrategy</code> reference <a class="header-anchor" href="#cachepluginstrategy-reference" aria-label="Permalink to &quot;`CachePluginStrategy` reference&quot;">​</a></h2><h3 id="debug" tabindex="-1"><code>debug</code> <a class="header-anchor" href="#debug" aria-label="Permalink to &quot;`debug`&quot;">​</a></h3><p>Enable extra log with <a href="https://www.npmjs.com/package/debug" target="_blank" rel="noreferrer">debug</a> package. This is usefull only when configuring the plugin.</p><ul><li><strong>Type:</strong> <code>boolean</code></li><li><strong>Default:</strong> <code>false</code></li></ul><h3 id="enableetag" tabindex="-1"><code>enableEtag</code> <a class="header-anchor" href="#enableetag" aria-label="Permalink to &quot;`enableEtag`&quot;">​</a></h3><p>Enable etag generation for response. Also enable etag lookup when <code>If-None-Match</code> header is present on requests. This add extra CPU overhead due to the etag computation but save bandwidth by sending <code>304 Not Modified</code> response.</p><ul><li><strong>Type:</strong> <code>boolean</code></li><li><strong>Default:</strong> <code>false</code></li></ul><h3 id="enablexcacheheaders" tabindex="-1"><code>enableXCacheHeaders</code> <a class="header-anchor" href="#enablexcacheheaders" aria-label="Permalink to &quot;`enableXCacheHeaders`&quot;">​</a></h3><p>Add extra <code>X-Cache</code> headers to responses. This is usefull when configuring the plugin or when using behind a reverse proxy.</p><ul><li><strong>Type:</strong> <code>boolean</code></li><li><strong>Default:</strong> <code>false</code></li></ul><h3 id="enableadminctbmiddleware" tabindex="-1"><code>enableAdminCTBMiddleware</code> <a class="header-anchor" href="#enableadminctbmiddleware" aria-label="Permalink to &quot;`enableAdminCTBMiddleware`&quot;">​</a></h3><p>Register a middleware to handle cache invalidation requests performed using the admin UI.</p><ul><li><strong>Type:</strong> <code>boolean</code></li><li><strong>Default:</strong> <code>true</code></li></ul><h3 id="resetonstartup" tabindex="-1"><code>resetOnStartup</code> <a class="header-anchor" href="#resetonstartup" aria-label="Permalink to &quot;`resetOnStartup`&quot;">​</a></h3><p>Delete all cache entries from the provider on startup. This is usefull when performing a migration using an external cache provider.</p><ul><li><strong>Type:</strong> <code>boolean</code></li><li><strong>Default:</strong> <code>false</code></li></ul><h3 id="clearrelatedcache" tabindex="-1"><code>clearRelatedCache</code> <a class="header-anchor" href="#clearrelatedcache" aria-label="Permalink to &quot;`clearRelatedCache`&quot;">​</a></h3><p>Try to delete all cache entries related to the deleted entry.</p><ul><li><strong>Type:</strong> <code>boolean</code></li><li><strong>Default:</strong> <code>true</code></li></ul><h3 id="keysprefix" tabindex="-1"><code>keysPrefix</code> <a class="header-anchor" href="#keysprefix" aria-label="Permalink to &quot;`keysPrefix`&quot;">​</a></h3><p>Prefix added to the cache keys.</p><ul><li><strong>Type:</strong> <code>string</code></li><li><strong>Default:</strong> <code>&#39;&#39;</code></li></ul><h3 id="hitpass" tabindex="-1"><code>hitpass</code> <a class="header-anchor" href="#hitpass" aria-label="Permalink to &quot;`hitpass`&quot;">​</a></h3><p>When true, the cache plugin will not lookup for cache and serve fresh response from backend instead. Also, the response is not stored in the cache.</p><ul><li><strong>Type:</strong> <code>(ctx: Context) =&gt; boolean</code></li><li><strong>Default:</strong></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hitpass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ctx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ignore cache when authorization or cookie headers are present</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ctx.request.headers.authorization </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ctx.request.headers.cookie</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  );</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="keys" tabindex="-1"><code>keys</code> <a class="header-anchor" href="#keys" aria-label="Permalink to &quot;`keys`&quot;">​</a></h3><p>Options used to generate the cache keys.</p><ul><li><strong>Type:</strong> <a href="#cachekeysconfig"><code>CacheKeysConfig</code></a></li></ul><h3 id="maxage" tabindex="-1"><code>maxAge</code> <a class="header-anchor" href="#maxage" aria-label="Permalink to &quot;`maxAge`&quot;">​</a></h3><p>Default max age for cached entries.</p><ul><li><strong>Type:</strong> <code>number</code></li><li><strong>Default:</strong> <code>3600000</code> (1 hour)</li></ul><h3 id="contenttypes" tabindex="-1"><code>contentTypes</code> <a class="header-anchor" href="#contenttypes" aria-label="Permalink to &quot;`contentTypes`&quot;">​</a></h3><p>Specify each content types that should be cached. If a string is provided, default configuration from <a href="#cachecontenttypeconfig"><code>CacheContentTypeConfig</code></a> will be used</p><ul><li><strong>Type:</strong> <a href="#cachecontenttypeconfig"><code>(string|CacheContentTypeConfig)[]</code></a></li><li><strong>Default:</strong> <code>[]</code></li></ul>',41)]))}const k=a(t,[["render",l]]);export{g as __pageData,k as default};
