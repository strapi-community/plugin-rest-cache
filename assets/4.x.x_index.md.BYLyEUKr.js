import{_ as o,c as r,o as n,j as t,af as i,a as s,t as d}from"./chunks/framework.CBsWK142.js";const y=JSON.parse('{"title":"Introduction","description":"","frontmatter":{"title":"Introduction"},"headers":[],"relativePath":"4.x.x/index.md","filePath":"versions/4.x.x/index.md","lastUpdated":1758132556000}'),c={name:"4.x.x/index.md"},l={id:"frontmatter-title",tabindex:"-1"};function p(a,e,h,m,u,_){return n(),r("div",null,[t("h1",l,[s(d(a.$frontmatter.title)+" ",1),e[0]||(e[0]=t("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"â€‹",-1))]),e[1]||(e[1]=i('<p>This plugin inject a middleware that caches incoming <code>GET</code> requests on the strapi API, based on query params and Content-Type UID. The cache is automatically busted everytime a <code>PUT</code>, <code>PATCH</code>, <code>POST</code>, or <code>DELETE</code> request comes in or when an entity is updated through the admin panel. It can also be programmatically cleared via exposed services or admin routes.</p><p>The cache content is stored by a <a href="./provider/"><strong>provider</strong></a>, which can be either an in-memory provider, a redis connection, a file system, or any other custom provider.</p><p>You can set a <a href="./strategy/"><strong>strategy</strong></a> to tell what to cache and how much time responses should be cached. The cache will be invalidated when the related Content-Type is updated, so you <strong>never have to worry about stale data</strong>.</p><p>In addition, you can interact with the plugin through the admin panel, api admin routes or programmatically using internal services.</p>',4))])}const T=o(c,[["render",p]]);export{y as __pageData,T as default};
