import{_ as s,c as a,o as t,af as i}from"./chunks/framework.CBsWK142.js";const g=JSON.parse('{"title":"Content types","description":"","frontmatter":{"title":"Content types"},"headers":[],"relativePath":"4.x.x/strategy/cache-content-type.md","filePath":"versions/4.x.x/strategy/cache-content-type.md","lastUpdated":1758132556000}'),n={name:"4.x.x/strategy/cache-content-type.md"};function l(h,e,o,p,r,c){return t(),a("div",null,e[0]||(e[0]=[i(`<h1 id="content-types" tabindex="-1">Content types <a class="header-anchor" href="#content-types" aria-label="Permalink to &quot;Content types&quot;">​</a></h1><p>The plugin will <strong>only inject cache middleware to Content-Types which have been explicitely enabled</strong>. This can be done by setting the <code>config.strategy.contentTypes</code> configuration.</p><p>It accept either a string or an object, so we can configure differently each Content-Type.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// file: /config/plugins.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ({</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;rest-cache&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    config: {,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      provider: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      strategy: {</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        contentTypes: </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* @type {(string|CacheContentTypeConfig)[]} */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line highlighted"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // can be a string (the Content-Type UID)</span></span>
<span class="line highlighted"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          &quot;api::article.article&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line highlighted"><wbr></span>
<span class="line highlighted"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // or a custom CacheContentTypeConfig object</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          {</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            contentType: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;api::pages.pages&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line highlighted"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // ...</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          },</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="cachecontenttypeconfig-reference" tabindex="-1"><code>CacheContentTypeConfig</code> reference <a class="header-anchor" href="#cachecontenttypeconfig-reference" aria-label="Permalink to &quot;\`CacheContentTypeConfig\` reference&quot;">​</a></h2><h3 id="injectdefaultroutes" tabindex="-1"><code>injectDefaultRoutes</code> <a class="header-anchor" href="#injectdefaultroutes" aria-label="Permalink to &quot;\`injectDefaultRoutes\`&quot;">​</a></h3><p>When enabled, inject <a href="https://docs.strapi.io/developer-docs/latest/developer-resources/database-apis-reference/rest-api.html#api-endpoints" target="_blank" rel="noreferrer">default routes</a> for each content type.</p><ul><li><strong>Type:</strong> <code>boolean</code></li><li><strong>Default:</strong> <code>true</code></li></ul><h3 id="hitpass" tabindex="-1"><code>hitpass</code> <a class="header-anchor" href="#hitpass" aria-label="Permalink to &quot;\`hitpass\`&quot;">​</a></h3><p>When true, the cache plugin will not lookup for cache and serve fresh response from backend instead. Also, the response is not stored in the cache.</p><ul><li><strong>Type:</strong> <code>(ctx: Context) =&gt; boolean | boolean</code></li><li><strong>Default:</strong> <em>(inherit from <code>CachePluginStrategy</code> if set)</em></li></ul><h3 id="routes" tabindex="-1"><code>routes</code> <a class="header-anchor" href="#routes" aria-label="Permalink to &quot;\`routes\`&quot;">​</a></h3><p>Additionnal routes to register for this content type.</p><ul><li><strong>Type:</strong> <a href="./cache-custom-routes.html#cacherouteconfig-reference"><code>CacheRouteConfig[]</code></a></li><li><strong>Default:</strong> <code>[]</code></li></ul><h3 id="contenttype" tabindex="-1"><code>contentType</code> <a class="header-anchor" href="#contenttype" aria-label="Permalink to &quot;\`contentType\`&quot;">​</a></h3><p>Content-Type UID to cache (e.g. <code>api::article.article</code>).</p><ul><li><strong>Type:</strong> <code>string</code></li><li><strong>Default:</strong> <code>&#39;&#39;</code></li></ul><h3 id="keys" tabindex="-1"><code>keys</code> <a class="header-anchor" href="#keys" aria-label="Permalink to &quot;\`keys\`&quot;">​</a></h3><p>Options used to generate the cache keys.</p><ul><li><strong>Type:</strong> <a href="./cache-keys.html#cachekeysconfig-reference"><code>CacheKeysConfig</code></a></li><li><strong>Default:</strong> <em>(inherit from <code>CachePluginStrategy</code> if set)</em></li></ul><h3 id="maxage" tabindex="-1"><code>maxAge</code> <a class="header-anchor" href="#maxage" aria-label="Permalink to &quot;\`maxAge\`&quot;">​</a></h3><p>Default max age for cached entries.</p><ul><li><strong>Type:</strong> <code>number</code></li><li><strong>Default:</strong> <em>(inherit from <code>CachePluginStrategy</code> if set)</em></li></ul>`,23)]))}const k=s(n,[["render",l]]);export{g as __pageData,k as default};
